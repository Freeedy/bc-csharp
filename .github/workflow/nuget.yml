name: Publish to NuGet

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v2.5.0
  workflow_dispatch:  # Manual trigger
    inputs:
      version:
        description: 'Version to publish (leave empty for auto-versioning)'
        required: false
        type: string

jobs:
  publish:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for Nerdbank.GitVersioning
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          6.0.x
          8.0.x
    
    - name: Install Nerdbank.GitVersioning
      run: dotnet tool install --global nbgv
    
    - name: Get Version
      id: nbgv
      run: |
        $version = nbgv get-version -v NuGetPackageVersion
        echo "PACKAGE_VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "Building version: $version"
    
    - name: Restore dependencies
      run: dotnet restore crypto/src/BouncyCastle.Crypto.csproj
    
    - name: Build
      run: dotnet build crypto/src/BouncyCastle.Crypto.csproj --configuration Release --no-restore
    
    - name: Run Tests
      run: dotnet test crypto/test/BouncyCastle.Crypto.Tests.csproj --configuration Release --no-build --verbosity normal
      continue-on-error: true  # Continue even if tests fail (optional)
    
    - name: Pack NuGet Package
      run: dotnet pack crypto/src/BouncyCastle.Crypto.csproj --configuration Release --no-build --output ./nuget-packages
    
    - name: List packages
      run: dir ./nuget-packages
    
    - name: Publish to NuGet.org
      run: dotnet nuget push ./nuget-packages/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./nuget-packages/*.nupkg

  create-release:
    needs: publish
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
